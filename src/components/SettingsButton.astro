---
import GearIcon from "../icons/gear.svg";
import Dialog from "./Dialog.astro";
import DialogButton from "./DialogButton.astro";
import TextGradient from "./TextGradient.astro";
import { CONTACT } from "../constants";
import Input from "./Input.astro";
---

<DialogButton aria-label="Open settings" opens="#settingsDialog" class="settings-button">
    <GearIcon />
</DialogButton>
<Dialog id="settingsDialog" aria-label="Settings for the job test">
    <header>
        <h3>
            <TextGradient> Settings </TextGradient>
        </h3>
    </header>
    <form id="settings-form" data-default-mailto={CONTACT.MAILTO}>
        <fieldset>
            <legend><strong>Recipient Email</strong>:</legend>
            <Input 
                type="email" 
                id="mailto" 
                name="mailto"
                required="false" 
                placeholder="joe@example.com"
                style="padding-block-start: 2px;"
            />
        </fieldset>
        <fieldset class="taglist">
            <legend><strong>Dark Mode</strong>:</legend>
            <div class="tag-toggle">
                <input type="radio" name="dark-mode-radio" value="auto" id="dark-mode-radio-auto" />
                <label for="dark-mode-radio-auto">auto</label>
            </div>
            <div class="tag-toggle">
                <input type="radio" name="dark-mode-radio" value="light" id="dark-mode-radio-light" />
                <label for="dark-mode-radio-light">light</label>
            </div>
            <div class="tag-toggle">
                <input type="radio" name="dark-mode-radio" value="dark" id="dark-mode-radio-dark" />
                <label for="dark-mode-radio-dark">dark</label>
            </div>
        </fieldset>
        <output name="theme-choice-result" aria-live="polite">
            <p data-choice></p>
            <p data-system></p>
        </output>
        
    </form>
</Dialog>

<style>
    form {
        display: grid;
    }
    fieldset + fieldset {
        margin-top: 1rem;
    }
    output {
        margin: 1rem;
        & > * {
            font-size: 0.8rem;
            text-align: center;
            max-width: 32ch;
            margin-inline: auto;
        }
    }
</style>

<style is:global>
    .settings-button {
        background: transparent;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

    .settings-button:focus-visible,
    .settings-button:has(dialog::backdrop) {
        outline-color: var(--storyblok-job-test-header-color-items);
        outline-width: 4px;
        outline-style: solid;
    }

    .settings-button svg {
        width: 24px;
        height: 24px;
        fill: currentColor;
        transition: transform 0.2s ease;
    }
    #settingsDialog {
        min-inline-size: 16rem;
        & h3 {
            margin-block-end: 1rem;
        }
        & fieldset {
            min-inline-size: min-content;
            margin-inline: 2px;
            border-width: 2px;
            border-style: solid;
            border-color: var(--storyblok-job-test-form-accent-color);
            border-image: initial;
            padding-block: 0.35em 0.625em;
            padding-inline: 0.75rem;
            & legend {
                padding-inline: 0.5rem;
            }
        }
    }


    :has(#settingsDialog[open]) .settings-button svg,
    .settings-button:hover svg {
        transform: rotate(20deg);
    }
    .settings-button svg path {
        fill: var(--storyblok-job-test-header-color-items);
    }
    #settings-form {
        margin-block-end: 0;
    }
    .taglist {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        gap: 0.5rem;

        & > legend {
            margin-block-end: 0.8rem;
        }

        > .tag-toggle {
            display: grid;
            box-shadow: var(--storyblock-job-test-standard-shadow);
            border-radius: var(--storyblok-job-test-form-input-radius);
            > * {
                grid-area: 1/1;
            }

            > label {
                padding-inline: 1rem;
                padding-block: 0.5rem;
                border-radius: 0.4rem;
                cursor: pointer;
                background-color: var(--storyblok-job-test-form-accent-color);
                color: white;
            }

            > input {
                appearance: none;
                background: none !important;
                border: none;
                inline-size: 100%;
                block-size: 100%;
                border-radius: 5px;

                &:checked ~ label {
                    background-color: var(--storyblok-job-test-form-accent-color-hover);
                    color: white;
                    outline: 1px solid white;
                    outline-offset: -3px;
                    scale: 0.95;
                }

                &:not(:checked):is(:focus-within, :hover) ~ label {
                    color: white;
                }
            }
        }
    }
</style>

<script>
    const STORAGE_KEY = 'user-settings-dark-mode';
    const EMAIL_STORAGE_KEY = 'user-settings-mailto';

    const THEME_MESSAGES = {
        auto: "Theme follows system preferences.",
        light: "Light theme enforced.",
        dark: "Dark theme enforced."
    };

    function getSystemColorScheme() {
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        } else if (window.matchMedia('(prefers-color-scheme: light)').matches) {
            return 'light';
        } else {
            return 'auto';
        }
    }

    function getUserChoice() {
        return localStorage.getItem(STORAGE_KEY);
    }

    function applyTheme() {
        const userChoice = getUserChoice();
        if (userChoice === 'light' || userChoice === 'dark') {
            document.documentElement.dataset.theme = userChoice;
        } else {
            document.documentElement.removeAttribute('data-theme');
        }
        console.log(`Theme applied: ${userChoice ?? 'auto'} (system: ${getSystemColorScheme()})`);
    }

    function updateRadioButtons() {
        const userChoice = getUserChoice();
        const radios = document.querySelectorAll('input[name="dark-mode-radio"]');

        radios.forEach(radio => {
            if (!userChoice && radio.value === 'auto') {
                radio.checked = true;
            } else if (radio.value === userChoice) {
                radio.checked = true;
            } else if (radio.value !== userChoice && radio.value !== 'auto') {
                radio.checked = false;
            }
        });
    }

    function updateThemeMessage() {
        const userChoice = getUserChoice();
        const systemChoice = getSystemColorScheme();

        const choice = userChoice ?? 'auto';
        const message = THEME_MESSAGES[choice];

        const choiceSpan = document.querySelector('output[name="theme-choice-result"] [data-choice]');
        const systemSpan = document.querySelector('output[name="theme-choice-result"] [data-system]');

        if (choiceSpan) {
            choiceSpan.textContent = message;
        }
        if (systemSpan) {
            systemSpan.textContent = `(System settings: ${systemChoice})`;
        }
    }

    function loadMailtoSetting() {
        const settingsForm = document.getElementById('settings-form');
        const DEFAULT_MAILTO = settingsForm?.dataset.defaultMailto || '';

        let storedEmail = localStorage.getItem(EMAIL_STORAGE_KEY);

        if (!storedEmail) {
            storedEmail = DEFAULT_MAILTO;
            localStorage.setItem(EMAIL_STORAGE_KEY, storedEmail);
        }

        const mailtoInput = document.getElementById('mailto');
        if (mailtoInput) {
            mailtoInput.value = storedEmail;
            console.log('Loaded mailto:', storedEmail);
        }
    }

    window.addEventListener('DOMContentLoaded', () => {
        applyTheme();
        updateRadioButtons();
        updateThemeMessage();
        loadMailtoSetting();
    });

    const dialog = document.getElementById('settingsDialog');
    dialog?.addEventListener('toggle', () => {
        if (dialog.open) {
            applyTheme();
            updateThemeMessage();

            setTimeout(() => {
                loadMailtoSetting();
            }, 0);
        }
    });

    document.getElementById('settings-form')?.addEventListener('change', (event) => {
        const target = event.target;
        if (target?.name === 'dark-mode-radio') {
            if (target.value === 'auto') {
                localStorage.removeItem(STORAGE_KEY);
            } else {
                localStorage.setItem(STORAGE_KEY, target.value);
            }
            applyTheme();
            updateThemeMessage();
        }
    });

    document.getElementById('settings-form')?.addEventListener('input', (event) => {
        const target = event.target;
        if (target?.id === 'mailto') {
            localStorage.setItem(EMAIL_STORAGE_KEY, target.value);
            console.log('Stored mailto:', target.value);
        }
    });
</script>